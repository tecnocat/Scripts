<?php

/**
 * tecnocat
 *
 * @section LICENSE
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @details    MÃ³dulo para el control del tipo de contenido potenciar producto
 * @category   COMPANY
 * @version    $Id: enhance_product.module 0 2011-08-24 09:11:45 lramosc $
 * @author     tecnocat
 * @author     Luis Ramos Chumillas
 * @file       /sites/all/modules/enhance_product/enhance_product.module
 * @date       2011-08-24 09:11:45
 * @copyright  GNU Public License.
 * @link       http://www.gnu.org/licenses/gpl.html
 *
 */

/**
 * CONSTANTS
 */
define('PDF2SWF_MODULE_NAME',              'enhance_product');
define('PDF2SWF_PREG_MATCH_VERSION', '/pdf2swf.*swftools/is');

/**
 * Implements hook_menu() - tecnocat
 */
function enhance_product_menu($may_cache) {

  $menu = array();

  $menu[] = array(
    'path'     => 'viewer.html',
    'title'    => t('Viewer of SWF\'s PDF!'),
    'callback' => '_viewer_flv',
    'access'   => user_access('access content'),
    'type'     => MENU_CALLBACK,
  );

  $menu[] = array(
    'path'     => 'HTTPService',
    'title'    => t('HTTP Service for Flex'),
    'callback' => '_pdf2swf_http_service',
    'access'   => user_access('access content'),
    'type'     => MENU_CALLBACK,
  );

  $menu[] = array(
    'path'     => 'pdf2swf',
    'title'    => t('PDF to SWF personal Cron'),
    'callback' => '_pdf2swf_cron',
    'access'   => user_access('access content'),
    'type'     => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implements hook_nodeapi() - tecnocat
 */
function enhance_product_nodeapi(&$node, $op, $teaser, $page) {

  $nid = $node->nid;

  switch ($op) {

    case 'insert':
    case 'update':

      if ($node->type == PDF2SWF_MODULE_NAME) {
        _pdf2swf($nid, $op);
      }
      break;

    case 'delete':

      if (is_resource(STDOUT)) { fclose(STDOUT); }
      if (is_resource(STDERR)) { fclose(STDERR); }

      $module  = drupal_get_path('module', PDF2SWF_MODULE_NAME);
      $dirname = dirname($_SERVER['SCRIPT_FILENAME']);
      $dirbase = variable_get('file_directory_path', $module);
      $dirbase = $dirbase . '/' . PDF2SWF_MODULE_NAME;
      $command = 'rm -rf ' . $dirname . '/' . $dirbase . '/??f/' . $nid;
      exec($command, $output, $status);
      break;
  }
}

/**
 * Implements hook_cron() - tecnocat
 */
function enhance_product_cron() {

  _pdf2swf_cron();
}

/**
 * Implementacion del hook_block
 *
 * @return $block
 */
function enhance_product_block($op = 'list', $delta = 0, $edit = array()){

  if ($op == 'list') {

    $blocks[0] = array(
      'info' => t('Company enhance product'),
    );

    return $blocks;
  }
  elseif ($op == 'view') {

    switch ($delta) {

      case 0:

        $block = array(
          'subject' => t('enhance product'),
          'content' => enhance_product_entries(),
        );
        break;
    }

    return $block;
 }
}

/**
 * Enhance product
 *
 * @return Array $rows
 */
function enhance_product_get_entries(){
	$id_site = variable_get('id_site',FALSE);
	$query='SELECT node.nid,
			node.title AS title,
			file_pdf.filepath AS pdf,
			file_video.filepath AS video,
			file_image.filepath AS image,
			term_node.tid AS tid
			FROM content_type_enhance_product
			LEFT JOIN files AS file_pdf ON content_type_enhance_product.field_pdf_fid=file_pdf.fid
			LEFT JOIN files AS file_video ON content_type_enhance_product.field_video_0_fid=file_video.fid
			LEFT JOIN files AS file_image ON content_type_enhance_product.field_image_fid=file_image.fid
			INNER JOIN node ON content_type_enhance_product.nid=node.nid
			INNER JOIN term_node ON node.nid=term_node.nid
                        INNER JOIN localizernode ln ON node.nid=ln.nid
			WHERE node.TYPE="enhance_product" AND node.STATUS=1 AND node.promote=1 AND ln.language="%s" AND term_node.tid=%d';
	$result = db_query($query,localizer_get_language(),$id_site);
	$i=0;
	while ($row = db_fetch_array($result)){
	$rows[$i]=$row;
	$i++;
	}
	return $rows;
}

/**
 * Render 10 blog entries
 *
 * @return $output
 */
function enhance_product_entries() {

  $rows = enhance_product_get_entries();
  $html = '<div class="enhance-product-content">';
  $link = null;
  foreach ($rows as $row) {

    extract($row);

    if (is_file($pdf)) {
      $link = 'viewer.html?libro=' . $nid;
      $size = 'width=960;height=720';
    }
    elseif (is_file($video)) {
      $link = $video;
      $size = 'width=640;height=480';
    }
	global $base_path;
    $html .= '
    <div class="image">
      <a href="'.$base_path. $link . '" rel="shadowbox;' . $size . ';options={handleLgImages:\'drag\'}">
      <img src="'.$base_path. $image . '" width="156" height="116" title="' . $title . '"></a>
    </div>';
  }
  $html .= '</div>';
  if ($link) {
    return theme(PDF2SWF_MODULE_NAME, $html);
  }
  else {
    return '<!-- empty html - tecnocat -->';
  }

}

/**
 * Function to process any PDF to cut in swf pages - tecnocat
 */
function _pdf2swf($nid = null, $op = 'check') {

  // check for pdf2swf installed
  if (is_resource(STDOUT)) { fclose(STDOUT); }
  if (is_resource(STDERR)) { fclose(STDERR); }

  $pdf2swf = false;
  $command = 'pdf2swf -V';
  exec($command, $output, $status);

  foreach ($output as $message) {

    if (preg_match(PDF2SWF_PREG_MATCH_VERSION, $message)) {

      $pdf2swf = true;
      break;
    }
  }

  if (!$pdf2swf) {

    $msg  = 'SWFTOOLS ERROR: pdf2swf binary not found or version is invalid. ';
    $msg .= 'Please contact with the system administrator.';
    drupal_set_message(t($msg));
  }
  else {

    // check for folder structure
    $folders = array(
      'source' => 'pdf',
      'target' => 'swf',
    );
    $module  = drupal_get_path('module', PDF2SWF_MODULE_NAME);
    $dirname = dirname($_SERVER['SCRIPT_FILENAME']);
    $dirbase = variable_get('file_directory_path', $module);
    $dirbase = $dirbase . '/' . PDF2SWF_MODULE_NAME;

    foreach ($folders as $type => $folder) {

      $$type = $dirname . '/' . $dirbase . '/' . $folder . '/';

      if (!is_dir($$type)) {

        if (!recursive_mkdir($$type, 0777)) {
          $placeholders = array('%path' => $$type);
          $msg  = 'The system can not create the necessary structure folder ';
          $msg .= '%path due to permission restrictions, please change the ';
          $msg .= 'permissions to allow a web server to use mkdir.';
          drupal_set_message(t($msg, $placeholders), 'error');
        }
        else {
          $placeholders = array('%path' => $$type);
          drupal_set_message(t('%path directory was created.', $placeholders));
        }
      }
      /*
      else {

        if (is_resource(STDOUT)) { fclose(STDOUT); }
        if (is_resource(STDERR)) { fclose(STDERR); }

        drupal_set_message($$type . ' was deleted ;-(');

        $command = 'rm -rfv ' . $$type;
        drupal_set_message($command);
        exec($command, $output, $status);

        foreach ($output as $message) {
          drupal_set_message($message);
        }
      }
      */
    }

    // check for disk permissions
    if (is_dir($source) AND is_dir($target)) {

      $continue = true;

      foreach ($folders as $type => $dummy) {

        $file = $$type . 'dummy';

        if (is_file($file)) {
          unlink($file);
        }

        $fp = fopen($file, 'a');
        fwrite($fp, 'dummy');
        fclose($fp);

        if (!is_file($file)) {
          $continue     = false;
          $placeholders = array('%path' => $$type);
          $msg  = 'The system can\'t access to write files in %path due to ';
          $msg .= 'permission restrictions, please change the permissions to';
          $msg .= 'allow a web server to write files in this dir.';
          drupal_set_message(t($msg, $placeholders), 'error');
        }
        else {
          unlink($file);
        }
      }
    }
  }

  if ($continue AND $nid) {

    // remove old files
    $sourcenid = $source . $nid . '/';
    $targetnid = $target . $nid . '/';

    if (is_dir($targetnid)) {

      if (is_resource(STDOUT)) { fclose(STDOUT); }
      if (is_resource(STDERR)) { fclose(STDERR); }

      if ($op != 'check') {

        $command = 'rm -rf ' . $targetnid . '*.swf';
        exec($command, $output, $status);
      }
    }
    else {
      mkdir($targetnid, 0777);
    }

    if (!is_dir($sourcenid)) {
      mkdir($sourcenid, 0777);
    }

    // call to pdf2swf
    $node = node_load($nid);
    $pdf  = $node->field_pdf[count($node->field_pdf) - 1]['filepath'];
    $swf  = $targetnid . 'page-1.swf';

    if (is_file($pdf) AND !is_file($swf)) {

      $commands = array();

      ini_set('max_execution_time', 0);

      list($mins, $secs) = explode(' ', microtime());
      $microtime   = ((float) $mins + (float) $secs);
      $stats_start = $microtime;
      $commands[]  = 'rm -f "' . $sourcenid . '*.pdf"';
      $commands[]  = 'cp -f "' . $dirname . '/' . $pdf . '" "' . $sourcenid . '"';
      $commands[]  = 'pdf2swf "' . $dirname . '/' . $pdf . '" -o "' . $targetnid . 'page-%.swf" -T 9 -q';

      foreach ($commands as $command) {

        if (is_resource(STDOUT)) { fclose(STDOUT); }
        if (is_resource(STDERR)) { fclose(STDERR); }

        exec($command, $output, $status);
      }

      list($mins, $secs) = explode(' ', microtime());
      $microtime   = ((float) $mins + (float) $secs);
      $stats_end   = $microtime;
      $stats_pages = count(glob($targetnid . '*.swf'));
      $stats_title = $node->title;

      ini_restore('max_execution_time');

      // Show stats info
      $microtime = (float) $stats_end - (float) $stats_start;
      $time      = round($microtime, 3);
      $title     = $stats_title;
      $pages     = $stats_pages;
      $speed     = round((float) $pages / (float) $microtime, 3);

      $placeholders = array(
        '!time'  => $time,
        '!title' => $title,
        '!pages' => $pages,
        '!speed' => $speed,
      );
      $msg  = 'PDF "!title" was processed in !time secs. ';
      $msg .= '(!pages pages @ !speed pages/sec)';
      drupal_set_message(t($msg, $placeholders));

    }
  }
}

/**
 * Function to run personal cron to cut all pending PDF - tecnocat
 */
function _pdf2swf_cron() {

  $query  = "
    SELECT n.nid
    FROM {node} n
    WHERE n.type = '%s'
    AND n.status <> 0
  ";
  $result = db_query($query, PDF2SWF_MODULE_NAME);

  while ($node = db_fetch_object($result)) {

    _pdf2swf($node->nid);
  }
}

/**
 * Array/Object to XML simple function - tecnocat
 */
function _data_to_xml($data, $enclosure = 'XMLStructure', $tab = 0) {

  $n   = "\n";
  $t   = str_repeat(" ", $tab++);
  $xml = "$t<$enclosure>$n";

  if (is_object($data)) {
    $data = (array) $data;
  }

  if (is_array($data)) {

    foreach ($data as $tag => $val) {

      if (is_numeric($tag)) {
        $tag = 'item';
      }
      $xml .= _data_to_xml($val, $tag, $tab);
    }
  }
  else {
    $xml .= "$t <![CDATA[$data]]>$n";
  }

  $t    = str_repeat(" ", --$tab);
  $xml .= "$t</$enclosure>$n";
  return $xml;
}

/**
 * Function theme to show embebed Flex RIA application - tecnocat
 */
function _viewer_flv() {

  // Variables to parse to the template

  global $base_url;

  $libro    = $_REQUEST['libro']  ? $_REQUEST['libro']  : 69;
  $pagina   = $_REQUEST['pagina'] ? $_REQUEST['pagina'] : '';
  $baseurl  = $base_url;
  $service  = $base_url . '/HTTPService';
  $flexurl  = $base_url . '/' . drupal_get_path('module', PDF2SWF_MODULE_NAME) . '/flex/';
  $settings = array(
    'libro'   => $libro,
    'pagina'  => $pagina,
    'service' => $service,
    'baseurl' => $baseurl,
    'flexurl' => $flexurl,
  );
  foreach ($settings as $var => $val) {
    $flashvars .= '&' . $var . '=' . $val;
  }

  $html = '
<!-- Viewer codebase, html to load .swf with some pased data - tecnocat -->
<html lang="es">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="' . $flexurl . 'history/history.css" />
    <title>Viewer</title>
    <script src="' . $flexurl . 'AC_OETags.js" type="text/javascript"></script>
    <script src="' . $flexurl . 'history/history.js" type="text/javascript"></script>
    <style>
      body { margin: 0px; overflow:hidden }
    </style>
    <script type="text/javascript">
      <!--//--><![CDATA[//><!--
      var requiredMajorVersion = 9;
      var requiredMinorVersion = 0;
      var requiredRevision = 124;
      //--><!]]>
    </script>
  </head>
  <body scroll="no">
    <script type="text/javascript">
      <!--//--><![CDATA[//><!--
      var hasProductInstall = DetectFlashVer(6, 0, 65);
      var hasRequestedVersion = DetectFlashVer(requiredMajorVersion, requiredMinorVersion, requiredRevision);
      if ( hasProductInstall && !hasRequestedVersion ) {
        var MMPlayerType = (isIE == true) ? "ActiveX" : "PlugIn";
        var MMredirectURL = window.location;
        document.title = document.title.slice(0, 47) + " - Flash Player Installation";
        var MMdoctitle = document.title;
        AC_FL_RunContent(
          "src", "' . $flexurl . 'playerProductInstall",
          "FlashVars", "MMredirectURL="+MMredirectURL+\'&MMplayerType=\'+MMPlayerType+\'&MMdoctitle=\'+MMdoctitle+"",
          "width", "100%",
          "height", "100%",
          "align", "middle",
          "id", "viewer",
          "quality", "high",
          "bgcolor", "#ffffff",
          "name", "viewer",
          "allowScriptAccess","sameDomain",
          "type", "application/x-shockwave-flash",
          "pluginspage", "http://www.adobe.com/go/getflashplayer"
        );
      } else if (hasRequestedVersion) {
        AC_FL_RunContent(
            "src", "' . $flexurl . 'viewer",
            "width", "100%",
            "height", "100%",
            "align", "middle",
            "id", "viewer",
            "quality", "high",
            "bgcolor", "#ffffff",
            "name", "viewer",
            "allowScriptAccess","sameDomain",
            "allowFullScreen", "true",
            "flashVars","vars=true' . $flashvars . '",
            "type", "application/x-shockwave-flash",
            "pluginspage", "http://www.adobe.com/go/getflashplayer"
        );
        } else {
          var alternateContent = \'Alternate HTML content should be placed here. \'
          + \'This content requires the Adobe Flash Player. \'
          + \'<a href=http://www.adobe.com/go/getflash/>Get Flash</a>\';
          document.write(alternateContent);
        }
      //--><!]]>
    </script>
    <noscript>
      <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        id="viewer" width="100%" height="100%"
        codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab">
        <param name="movie" value="' . $flexurl . 'viewer.swf" />
        <param name="quality" value="high" />
        <param name="bgcolor" value="#ffffff" />
        <param name="allowScriptAccess" value="sameDomain" />
        <param name="flashVars" value="vars=true' . $flashvars . '" />
        <param name="allowFullScreen" value="true" />
        <embed src="viewer.swf" quality="high" bgcolor="#ffffff"
          width="100%" height="100%" name="viewer" align="middle"
          play="true"
          loop="false"
          quality="high"
          allowScriptAccess="sameDomain"
          allowFullScreen="true"
          type="application/x-shockwave-flash"
          flashVars="vars=true' . $flashvars . '"
          pluginspage="http://www.adobe.com/go/getflashplayer">
        </embed>
      </object>
    </noscript>
  </body>
</html>';

  die($html);
}

/**
 * HTTP Service to parse data from Drupal to Flex - tecnocat
 */
function _pdf2swf_http_service() {

  $option = $_REQUEST['mode'];

  switch ($option) {

    case 'view':
      $data = _pdf2swf_http_service_view();
      break;

    default:
      $data = array('option' => $option, 'status' => 'sucess', 'result' => 'ok');
      break;
  }

  $xml = _data_to_xml($data);
  header("Content-type: text/xml");
  die($xml);
}

/**
 * Main function to show what need Flex to render - tecnocat
 */
function _pdf2swf_http_service_view() {

  global $user, $base_url;

  $dirname = dirname($_SERVER['SCRIPT_FILENAME']);
  $nid     = (!empty($_POST['libro'])) ? $_POST['libro'] : null;

  if (is_numeric($nid) AND $nid) {

    $node = node_load($nid);
    $path = drupal_get_path('module', PDF2SWF_MODULE_NAME);
    $path = variable_get('file_directory_path', $path);
    $path = $path . '/' . PDF2SWF_MODULE_NAME;

    $swf  = $base_url . '/' . $path . '/swf/' . $node->nid . '/page-1.swf';
    $pdf  = $base_url . '/' . $node->field_pdf[0]['filepath'];
    $file = str_replace($base_url, $dirname, $swf);
    $img  = getimagesize($file);

    if (!$img[0]) {
      $img = getswfsize($file);
    }
    list($width, $height) = $img;

    $libro = array(
      'libro' => array(
        'libroid'     => $node->nid,
        'titulo'      => $node->title,
        'imagen'      => $swf,
        'descripcion' => 'Company viewer',
        'codlibro'    => 19700101,
        'fichero'     => $pdf,
        'Estado'      => $node->status,
        'ancho'       => $width,
        'alto'        => $height,
      ),
    );
    $path  = dirname($file);
    $pages = count(glob($path . '/*.swf'));
    $path  = dirname($swf);
    $swfs  = array();

    for ($page = 1; $page <= $pages; $page++) {

      $ruta   = $path . '/page-' . $page . '.swf';
      $swfs[] = array(
        'pagina' => array(
          'paginaid' => $page,
          'ruta'     => $ruta,
          'objetos'  => '',
        ),
      );
    }

    $libro['libro']['libroSWF'] = $swfs;

    $status = 'success';
    $result = array(
      'libros' => $libro,
    );
  }
  else {
    $status = 'error';
    $result = t('Invalid node ID.');
  }

  return array('option' => 'view', 'status' => $status, 'result' => $result);
}

/**
 * Function to binary to decimal - tecnocat
 */
function bin2dec($binstring) {

  $decvalue = 0;

  for ($i = 0; $i < strlen($binstring); $i++) {
    $decvalue += ((int) substr($binstring, strlen($binstring) - $i - 1, 1)) * pow(2, $i);
  }

  return $decvalue;
}

/**
 * Function to avoid problem getting img size in .swf objects in OpenSuSE
 */
function getswfsize($file) {

  $handle = fopen($file, 'rb');
  $data   = fread($handle, filesize($file));
  fclose($handle);
  $signature = substr($data, 0, 3);

  switch ($signature) {

    case 'FWS':
      $compressed = false;
      break;

    case 'CWS':
      $compressed = true;
      break;

    default:
      $msg = 'Expecting "FWS" or "CWS", found "%signature"';
      return array('error' => t($msg, array('%signature' => $signature)));
  }

  if ($compressed) {

    $head = substr($data, 0, 8);
    $data = substr($data, 8);

    if ($decompressed = gzuncompress($data)) {
      $data = $head . $decompressed;
    }
    else {
      return array('error' => t('Error decompressing compressed SWF data.'));
    }
  }

  $bits   = (ord(substr($data, 8, 1)) & 0xF8) >> 3;
  $length = ceil((5 + (4 * $bits)) / 8);
  $string = str_pad(decbin(ord(substr($data, 8, 1)) & 0x07), 3, '0', STR_PAD_LEFT);

  for ($i = 1; $i < $length; $i++) {
    $string .= str_pad(decbin(ord(substr($data, 8 + $i, 1))), 8, '0', STR_PAD_LEFT);
  }

  list($w1, $w2, $h1, $h2) = explode("\n", wordwrap($string, $bits, "\n", 1));

  $width  = intval(round(bin2dec($w2) / 20));
  $height = intval(round(bin2dec($h2) / 20));

  return array($width, $height);
}

/**
 * Function to implement recursive mkdir - tecnocat
 */
function recursive_mkdir($path, $mode) {

  foreach (explode('/', $path) as $dir) {

    if (!empty($dir)) {

      $fullpath = $fullpath . '/' . $dir;

      if (!is_dir($fullpath)) {
        if (!@mkdir($fullpath, $mode)) {
          return false;
        }
      }
    }
  }

  return true;
}