<?php /* UTF-8 Verified (áéíóú) */

/**
 * Constants
 */
define('EBOOK_FRONTPAGE', 'administrar-libros');

/**
 * Implementation of hook_init()
 */
function ebooks_init() {
  module_load_include('inc', 'ebooks', 'ebooks.httpservice');
}

/**
 * Implementation of hook_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
 */
function ebooks_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'ebook') {
    switch ($op) {
      case 'view':
        if (!preg_match('/\/cron.php$/', $_SERVER['SCRIPT_NAME'])
        &&  !preg_match('/\/run-cron$/', $_REQUEST['q'])) {
          global $user;
          if (_ebooks_user_access($user->uid, $_REQUEST['libro'])) {
            $_REQUEST['libro'] = $node->nid;
            switch ($node->field_ebook_status[0]['value']) {

              case 0: // 0-unprocessed
                if ((time() - $node->changed) < 10) {
                  drupal_set_message(t('The book "%title" has been stored successfully, in a few moments will be processed by the system so it can be view with the eBooks display.', array('%title' => $node->title)));
                }
                break;

              case 1: // 1-processed ok
                if (_ebooks_user_access($user->uid, $_REQUEST['libro'])) {
                  _ebooks_show_flex($_REQUEST);
                }
                else {
                  drupal_set_message(t('Sorry, your user does not have access to this book.'), 'warning');
                }
                break;

              case 2: // 2-errors in pdf
                if ($node->status == 0) {
                  drupal_set_message(t('Sorry, the book that you have requested can not be displayed due to errors in the PDF process.'), 'warning');
                }
                if ($node->status == 1) {
                  if ((time() - $node->changed) < 10) {
                    drupal_set_message(t('The book has been saved successfully and has been marked to be processed by the system again.'));
                  }
                }
                break;
            }
          }
          else {
            drupal_set_message(t('Sorry, your user does not have access to this book.'), 'warning');
            drupal_goto('user', drupal_get_destination());
          }
        }
        break;

      case 'delete':
        $target = dirname($_SERVER['SCRIPT_FILENAME']) . '/sites/default/files/private/processed-ebooks-swf/' . $node->nid;
        if ($node->nid) {
          exec("rm -rf $target");
        }
        break;
    }
  }
}

/**
 * Implementation of hook_menu()
 */
function ebooks_menu() {
  $items['catalog'] = array(
    'title' => t('Catalog'),
    'description' => t('Catalog'),
    'page callback' => '_ebooks_show_flex',
    'page arguments' => array(
      array(
        'swf' => 'VisorLibros',
      ),
    ),
    'access arguments' => array('visualizar ebooks'),
    'type' => MENU_CALLBACK,
  );
  $items['editor'] = array(
    'title' => t('Editor'),
    'description' => t('Editor'),
    'page callback' => '_ebooks_show_flex',
    'page arguments' => array(
      array(
        'swf' => 'EditorLibros',
      ),
    ),
    'access arguments' => array('editar ebooks'),
    'type' => MENU_CALLBACK,
  );
  $items['upload/object'] = array(
    'title' => t('Upload Object'),
    'description' => t('Allow Flex to upload objects.'),
    'page callback' => '_ebooks_http_upload_object',
    'access arguments' => array('editar ebooks'),
    'type' => MENU_CALLBACK,
  );
  $items['HTTPService'] = array(
    'title' => t('eBook Service'),
    'description' => t('Servide to provide Flex read/write info about eBooks.'),
    'page callback' => '_ebooks_http_service',
    'access arguments' => array('visualizar ebooks'),
    'type' => MENU_CALLBACK,
  );
  $items['pdf2swf'] = array(
    'title' => t('eBook PDF to SWF process'),
    'description' => t('Run the process to convert PDF in SWF pages.'),
    'page callback' => '_ebooks_pdf2swf',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme($existing, $type, $theme, $path)
 */
function ebooks_theme() {
  return array(
    'flexviewer' => array(
      'arguments' => array('data' => NULL),
      'template' => 'templates/flexviewer',
    ),
  );
}

/**
 * Implementation of hook_perm()
 */
function ebooks_perm() {
  return array('editar ebooks', 'visualizar ebooks');
}

/**
 * Implementation of hook_cron()
 */
function ebooks_cron($tweak = false) {
  $source = dirname($_SERVER['SCRIPT_FILENAME']) . '/sites/default/files/private/unprocessed-ebooks-pdf/';
  $target = dirname($_SERVER['SCRIPT_FILENAME']) . '/sites/default/files/private/processed-ebooks-swf/';
  $result = db_query("
    SELECT
      n.nid,
      n.title,
      f.filepath
    FROM {node} n
      LEFT JOIN {content_type_ebook} e ON n.nid = e.nid
      LEFT JOIN {files} f ON e.field_ebook_pdf_fid = f.fid
    WHERE n.type = 'ebook'
      AND n.status <> 0
      AND e.field_ebook_status_value IN('0','2')
    ORDER BY n.created ASC
  ");
  /*
    ebook status:
      0-unprocessed
      1-processed ok
      2-errors in pdf
    combination of possible values:
      1-0 = published     unprocessed   (by user)
      1-1 = published     processed ok  (by cron)
      0-2 = unpublished   errors in pdf (by cron)
      1-2 = re-published  errors in pdf (by user)
  */
  while ($row = db_fetch_object($result)) {
    $ebooks[] = $row;
  }
  if (is_array($ebooks)) {
    foreach ($ebooks as $ebook) {
      list($m, $s) = explode(" ", microtime());
      $microtime = ((float)$m + (float)$s);
      $stats[$ebook->nid]['start'] = $microtime;
      $dir_created = true;
      if (!is_dir($target . $ebook->nid)) {
        $dir_created = false;
        if (!mkdir($target . $ebook->nid)) {
          watchdog('ebook', t('eBook cron system can not create the necessary structure in the folder %swfpath due to permission restrictions, please change the permissions on this folder to 777.'), array('%swfpath' => $target), WATCHDOG_ERROR, l('See how to change permisions on Unix systems','http://es.wikipedia.org/wiki/Chmod'));
        }
        else {
          $dir_created = true;
        }
      }
      else {
        $command = 'rm -rf ' . $target . $ebook->nid . '/eBook-page-*.swf';
        exec($command);
      }
      if ($dir_created) {
        $command = 'pdf2swf "' . $ebook->filepath . '" -o "' . $target . $ebook->nid . '/eBook-page-%.swf" -T 9 -q';
        if (is_resource(STDOUT)) { fclose(STDOUT); }
        if (is_resource(STDERR)) { fclose(STDERR); }
        unset($errors);
        exec($command,$errors);
        foreach ($errors as $message) {
          $errortype = explode(' ', $message);
          $watchdog = WATCHDOG_NOTICE;
          $type = 'notice';
          $error = false;
          if ($errortype[0] == 'FATAL') {
            $type = 'error';
            $error = true;
            $watchdog = WATCHDOG_ERROR;
          }
          if ($errortype[0] == 'WARNING') {
            $type = 'warning';
            $error = false;
            $watchdog = WATCHDOG_WARNING;
          }
          $replaces = array('%type' => $type, '%nid' => $ebook->nid, '%message' => $message);
          watchdog('ebook', t('eBook pdf2swf %type when trying to convert eBook node ID %nid: %message. The eBook node ID have been marked as UNPUBLISHED'), $replaces, $watchdog);
        }
        $node = node_load($ebook->nid);
        if (!$error) {
          $paginas = scandir($target . $ebook->nid);
          $paginas = count($paginas) - 2;
          $node->field_ebook_message[0]['value'] = str_replace('!pages', $paginas, t('Conversion done successfully, !pages pages processed.'));
          $node->field_ebook_status[0]['value'] = 1; // done
          $node->field_ebook_paginas[0]['value'] = $paginas;
          watchdog('ebook', t('eBook pdf2swf conversion done for eBook node ID %nid'), array('%nid' => $ebook->nid), WATCHDOG_NOTICE);
        }
        else {
          $command = 'rm -rf ' . $target . $ebook->nid;
          exec($command);
          $node->field_ebook_message[0]['value'] = str_replace('!message', $message, t('Error when trying to convert this eBook: !message'));
          $node->field_ebook_status[0]['value'] = 2; // error
          $node->field_ebook_paginas[0]['value'] = 0;
          $node->field_ebook_objetos[0]['value'] = 0;
          $node->status = 0;
        }
        list($m, $s) = explode(" ", microtime());
        $microtime = ((float)$m + (float)$s);
        $stats[$ebook->nid]['end'] = $microtime;
        $stats[$ebook->nid]['pages'] = $paginas;
        $stats[$ebook->nid]['title'] = $node->title;
        node_save($node);
      }
    }
    if ($tweak) {
      return $stats;
    }
  }
}

/**
 * Implementation of hook_form_alter(&$form, &$form_state, $form_id)
 */
function ebooks_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {

    case 'taxonomy_access_user_add_access':
    case 'taxonomy_access_user_access_edit':
      $form['permissions']['grant_view']['#title'] = 'Ver término';
      foreach (array('update', 'delete', 'admin') as $op) {
        $form['permissions']['grant_' . $op]['#access'] = false;
      }
      $form['user']['#required'] = true;
      $form['#validate'][] = '_ebooks_formulario_valida';
      break;

    case 'taxonomy_access_user_access_delete':
      $form['#redirect'] = 'admin/content/taxonomy/1';
      $js = "
      Drupal.behaviors.eBookTerm = function (context) {
        $('#taxonomy-access-user-access-delete .container-inline > a').attr('href','javascript:history.back(-1)');
      }
      ";
      drupal_add_js($js, 'inline');
      break;

    case 'taxonomy_form_term':
      $js = "
      Drupal.behaviors.eBookTerm = function (context) {
        $('#taxonomy-form-term legend').hide();
        $('#taxonomy-form-term .container-inline > a').attr('href','javascript:history.back(-1)');
        $('#edit-description-wrapper').hide();
      }
      ";
      drupal_add_js($js, 'inline');
      $form['identification']['name']['#description'] = t('Please write a generic term that can catalog the books.');
      $form['identification']['name']['#maxlength'] = 40;
      $form['#validate'][] = '_ebooks_formulario_valida';
      break;

    case 'taxonomy_overview_terms':
      foreach (array('submit', 'reset_alphabetical') as $button) {
        $form[$button]['#access'] = false;
      }
      $js = "
      Drupal.behaviors.eBookTerms = function (context) {
        $('table#taxonomy tr td:first-child a:first-child').remove();
        $('table#taxonomy tr td:first-child a:first-child').each(
          function (index) {
            $(this).wrap('<span></span>');
          }
        );
        $('table#taxonomy tr td span').each(
          function (index) {
            $(this).html($(this).text());
          }
        );
      }
      ";
      drupal_add_js($js, 'inline');
      break;

    case 'user_filter_form':
      $form['filters']['buttons']['undo']['#access'] = false;
      $modules = &$form['filters']['status']['permission']['#options'];
      foreach ($modules as $module => $dummy) {
        if (!preg_match('/ebooks$/', $module)) {
          unset($modules[$module]);
        }
      }
      $js = "
      Drupal.behaviors.eBookUsers = function (context) {
        $('select#edit-operation option[value=pathauto_update_alias]').remove();
      }
      ";
      drupal_add_js($js, 'inline');
      break;

    case 'user_profile_form':
      $form['#validate'][] = '_ebooks_formulario_valida';
      break;

    case 'ebook_node_form':
      if ($user->uid != 1) {
        $form['buttons']['preview']['#access'] = false;
        $fields = array('paginas', 'objetos', 'status', 'message');
        foreach ($fields as $field) {
          $form['field_ebook_' . $field][0]['#access'] = false;
        }
        $fieldsets = array('author', 'options', 'attachments', 'revision_information');
        foreach ($fieldsets as $fieldset) {
          $form[$fieldset]['#access'] = false;
        }
        $form['body_field']['format']['format']['guidelines']['#title'] = '';
        $form['body_field']['format']['format']['guidelines']['#value'] = '';
        $form['body_field']['format'][2]['#value'] = '';
        //$form['#redirect'] = 'pdf2swf';
      }
      else {
        $form['#prefix'] = '<div class="messages error">' . t('You are logged in as Administrator, you have access to various fields that are not accessible to the user Editor, manipulation of these fields incorrectly can cause a malfunction in the application, it is recommended that the creation and editing of ebooks is made with the user Editor and not to the Administrator user. Use at your own risk.') . '</div>';
      }
      $form['#validate'][] = '_ebooks_formulario_valida';
      break;

    case 'node_delete_confirm':
      $js = "
      Drupal.behaviors.eBookTerm = function (context) {
        $('#node-delete-confirm .container-inline > a').attr('href','javascript:history.back(-1)');
      }
      ";
      drupal_add_js($js, 'inline');
      break;

    case 'views_exposed_form':
      $form['#validate'][] = '_ebooks_formulario_valida';
      $form['#validate'] = array_reverse($form['#validate']);
      break;

    default:
      break;

  }
  return $form;
}

/**
 * Related functions
 */
function _ebooks_formulario_valida($form, &$form_state) {
  switch($form_state['values']['form_id']) {

    case 'taxonomy_form_term':
      if (trim($form_state['values']['name'])) {
        if (preg_replace('![^0-9A-Za-záéíóúÁÉÍÓÚñÑ\s-_]!', '', strip_tags($form_state['values']['name'])) != $form_state['values']['name']) {
          form_set_error('name', t('The category name can not contain invalid characters or HTML entities. Enter a name composed of letters A-Z, a-z, numbers, spaces, dashes or underscores.'));
        }
      }
      break;

    case 'user_profile_form':
      if (trim($form_state['values']['mail'])) {
        if (!_ebooks_valid_email(trim($form_state['values']['mail']))) {
          form_set_error('mail', t('The e-mail address %mail is not valid.', array('%mail' => trim($form_state['values']['mail']))));
        }
      }
      break;

    case 'views_exposed_form':
      $input_keys = $form_state['values']['keys'];
      $input_term = $form_state['values']['term'];
      $strip_keys = preg_replace('![^0-9A-Za-záéíóúÁÉÍÓÚñÑ\s.,\-_]!', '', strip_tags($input_keys));
      if ($input_keys != $strip_keys) {
        $input_keys = '';
        form_set_error('keys', t('The search string can not contain invalid characters or HTML entities. Enter a search string composed of letters A-Z, a-z, numbers, spaces, dots, commas, dashes or underscores.'));
      }
      if ($form_state['input']['view_name']       == 'ebook'
      &&  $form_state['input']['view_display_id'] == 'page_1'
      &&  $form_state['input']['view_path']       == 'node/21') {
        drupal_goto(EBOOK_FRONTPAGE, array('keys' => $input_keys, 'term' => $input_term));
      }
      break;

    case 'ebook_node_form':
      if ($form_state['values']['field_ebook_status'][0]['value'] == 2) {
        $form_state['values']['field_ebook_message'][0]['value'] = t('This eBook has been republished by the editor.');
        $form_state['values']['status'] = 1;
      }
      break;
  }
}
function _ebooks_valid_email($mail) {
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $fqdn = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';
  return preg_match("/^$user@($fqdn|(\[($ipv4|$ipv6)\]))$/", $mail);
}